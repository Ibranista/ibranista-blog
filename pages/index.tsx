import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import Link from "next/link";
import Loader from "@/components/Loader";
import {
  collection,
  collectionGroup,
  DocumentData,
  FirestoreDataConverter,
  getDocs,
  limit,
  query,
  startAfter,
  Timestamp,
  where,
} from "firebase/firestore";
import { firestore } from "@/lib/firebase";
import { orderBy } from "lodash";
import { postToJSON } from "@/helpers/getUserWithUsername";
import { useState } from "react";
import PostFeed from "@/components/PostFeed";

const LIMIT = 1;
export async function getServerSideProps() {
  const ref = collectionGroup(firestore, "posts");
  const postsQuery = query(ref, where("published", "==", true), limit(LIMIT));

  // const posts = (await getDocs(postsQuery)).docs.map(postToJSON);
  const docResult = await getDocs(postsQuery);
  let arrayData = docResult.docs.map((doc) => doc.data());
  let posts = JSON.stringify(arrayData);
  return {
    props: { posts }, // will be passed to the page component as props
  };
}

export default function Home(props: any) {
  const [posts, setPosts] = useState(props.posts);
  const [loading, setLoading] = useState(false);
  const [postsEnd, setPostsEnd] = useState(false);
  console.log("the posts: ", JSON.parse(posts).length);
  const getMorePosts = async () => {
    setLoading(true);
    const last = JSON.parse(posts)[JSON.parse(posts).length - 1];
    console.log("last: ", last);
    if (last) {
      const cursor =
        typeof last.createdAt === "number"
          ? Timestamp.fromMillis(last.createdAt)
          : last.createdAt;
      console.log("cursor: ", cursor);
      // const query = firestore
      //   .collectionGroup('posts')
      //   .where('published', '==', true)
      //   .orderBy('createdAt', 'desc')
      //   .startAfter(cursor)
      //   .limit(LIMIT);

      const ref = collectionGroup(firestore, "posts");
      const postsQuery = query(
        ref,
        where("published", "==", true),
        startAfter(1000),
        limit(LIMIT)
      );

      const newPosts = (await getDocs(postsQuery)).docs.map((doc) =>
        doc.data()
      );

      setPosts(posts.concat(newPosts));
      setLoading(false);

      if (newPosts.length < LIMIT) {
        setPostsEnd(true);
      }
    } else {
      setPostsEnd(true);
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Home Page</h1>
        <Link
          href={{
            pathname: "/enter",
            // query: { name: "Ibran" },
          }}
        >
          Enter
        </Link>
        {/* <div>
          <Loader show />
        </div> */}
        <div>
          <PostFeed posts={posts} admin={false} />
          {!loading && !postsEnd && (
            <button onClick={getMorePosts}>Load More</button>
          )}
          <Loader show={loading} />
          {postsEnd && "You have reached the end!"}
        </div>
      </main>
    </>
  );
}
